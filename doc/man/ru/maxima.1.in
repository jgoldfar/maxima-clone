.TH MAXIMA 1L "September 10, 2005"
.ds Ps P\s-2OST\s+2S\s-2CRIPT\s+2
.ds Ts T\s-2RAN\s+2S\s-2CRIPT\s+2
.if t .ds Te T\\h'-0.1667m'\\v'0.20v'E\\v'-0.20v'\\h'-0.125m'X
.if n .ds Te TeX
.if t .ds La L\\h'-0.36m'\\v'-0.15v'\\s-2A\\s+2\\h'-0.15m'\\v'0.15v'T\\h'-0.1667m'\\v'0.20v'E\\v'-0.20v'\\h'-0.125m'X
.if n .ds La LaTeX
.ds Fl "F\s-2ranz\s+2\ L\s-2isp\s+2
.ds Ml "M\s-2ACLISP\s+2
.ds Cl "Common L\s-2isp\s+2
.ds Li "L\s-2isp\s+2
.ds Ky "GNU Common L\s-2isp\s+2
.ds Pr @prefix@
.ds Vr @VERSION@

.SH НАЗВАНИЕ
Maxima \- Common Lisp версия символьного математического пакета MACSYMA,
выпущенного под Общественной лицензией GNU
.LP
Xmaxima \- графическая версия maxima
.SH КРАТКАЯ СВОДКА
.B maxima
[\fIoptions\fR]
.LP
.B xmaxima 
[\fIoptions\fR]
.SH ОПИСАНИЕ
Maxima - модифицированная для работы под \*(Cl версия системы MACSYMA,
разработанной в Массачусетском технологическом институте. Это диалоговая
экспертная система и среда программирования для символьных и численных
математических преобразований. Написанная на \*(Li, она позволяет
дифференцировать, интегрировать, решать линейные или полиномиальные уравнения,
производить факторизацию многочленов, разлагать функции в
ряды Лорана или Тейлора, вычислять ряды Пуассона, производить матричные и тензорные
преобразования, двухмерная и трехмерная графика. Процедуры могут быть записаны
с помощью ALGOL-подобного синтаксиса; предусмотрены как \*(Li-подобные функции,
так и средства сопоставления с образцом. Файлы, содержащие объекты Maxima,
могут читаться и записываться на диск. Предварительно записанные команды
Maxima могут читаться из файла и выполняться в пакетном режиме.
.SH КЛЮЧИ
.TP
\fB\-b\fR \fIfile\fR, \fB\-\-batch=\fR\fIfile\fR
Обработать \fIfile\fR в пакетном режиме.
.TP
\fB\-\-batch-lisp=\fR\fIfile\fR
Обработать Lisp файл \fIfile\fR в пакетном режиме.
.TP
\fB\-\-batch-string=\fR\fIstring\fR
Обработать \fIstring\fR в пакетном режиме.
.TP
\fB\-d\fR, \fB\-\-directories\fR
Вывести информацию о директориях Maxima.
.TP
\fB\-\-disable\-readline\fR
Отключить поддержку readline.
.TP
\fB\-g\fR, \fB\-\-enable\-lisp\-debugger\fR
Включить Lisp отладчик.
.TP
\fB\-h\fR, \fB\-\-help\fR
Вывести краткую информацию об использовании.
.TP
\fB\-l\fR \fIlisp\fR, \fB\-\-lisp=\fR\fIlisp\fR 
Использовать реализацию Lisp \fIlisp\fR. Используйте \fB\-\-list-avail\fR для
вывода списка возможных значений.
.TP
\fB\-\-list-avail\fR
Вывести список доступных версий Lisp и Maxima.
.TP
\fB\-p\fR \fIlisp_file\fR, \fB\-\-preload-lisp=\fR\fIlisp_file\fR
Предварительно загрузить \fIlisp_file\fR.
.TP
\fB\-q\fR, \fB\-\-quiet\fR
Не выводить стартовое сообщение Maxima.
.TP
\fB\-r\fR \fIstring\fR, \fB\-\-run-string=\fR\fIstring\fR
Обработать \fIstring\fR в диалоговом режиме Maxima.
.TP
\fB\-s\fR \fIport\fR, \fB\-\-server=\fR\fIport\fR
Запустить сервер Maxima на порту \fIport\fR.
.TP
\fB\-u\fR \fIversion\fR, \fB\-\-use-version=\fR\fIversion\fR 
Запустить Maxima версии \fIversion\fR. Используйте \fB\-\-list-avail\fR для
вывода списка возможных значений.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Вывести дополнительную информацию из сценария запуска Maxima.
.TP
\fB\-\-version\fR
Вывести установленную версию (по умолчанию).
.TP
\fB\-\-very\-quiet\fR
Не выводить метки выражений и стартовое сообщение Maxima.


.SH ВВОДНЫЕ ИНСТРУКЦИИ
При инициализации
.I maxima
выводит стартовое сообщение, после чего появляется приглашение командной строки:
.LP
.B (%i1)
.LP
Все команды Maxima должны завершаться:
.TP
1)
точкой с запятой (в этом случае результат выполнения команды выводится на экран
в строке, начинающейся с 
.B %o ,
к которой добавляется номер команды), или
.TP
2)
знаком доллара, подавляющим печать строки с результатом.
.LP
.SH ПРИМЕР
.LP
(%i1) diff(sin(x),x);
.LP
(%d1)                         cos(x)
.LP
(%i2) integrate(%o1,x);
.LP
(%o2)                         sin(x)
.LP
Пользователь вводит команды, создающие
.I "объекты Maxima"
(такие как функции и системные переменные) и выполняющие действия над ними.
.LP
В UNIX может оказаться предпочтительным запускать Maxima под управлением GNU Emacs или XEmacs. 
Это можно сделать вызвав командный режим из
.IR emacs ,
а затем ввести
.IR maxima .
Желательно установить
.I maxima.el
из дистрибутива и использовать команду:
.IP
.B M-x maxima
.LP
Главное преимущество работы внутри
.I emacs
- то, что он предоставляет полную историю ввода/вывода. Выполнив команду
.IP
.B display2d:false ,
.LP
Вы получите возможность использовать вывод для ввод с помощью операций
вырезки/вставки.
.LP
\*(Li встроен в Maxima.
Функция to_lisp() входит в цикл чтения-вычисления-вывода Lisp. Функция
\*(Li (run) может использоваться для возврата в Maxima. Кроме того, одиночные
команды \*(Li могут быть вызваны при запуске в командной строке с ключом
\fB:lisp\fR. 
.SH ВСТРОЕННАЯ СПРАВКА
В систему встроена обширная диалоговая документация. Описание заданной команды
можно получить с помощью команды
.LP
\fBdescribe(command);\fR
.LP
или, проще,
.LP
\fB ? command\fR,
.LP
которая ищет в списке функций строку \fIcommand\fR. 
Демонстрационные файлы, предоставляющие полные примеры решения задач с помощью
Maxima, могут быть вызваны командой
\fBdemo(command);\fR.
Дополнительно поставляется библиотека командных файлов, созданных 
пользователями ("разделяемая библиотека"), предлагающая решения 
разнообразных задач.
.SH ДРУГАЯ ДОКУМЕНТАЦИЯ
Полная документация поставляется в форматах info и html.
.SH КОМАНДЫ ДЛЯ НАЧИНАЮЩИХ
.LP
Этот список включает только те команды, которые могут быть полезны начинающим
пользователям, до изучения справочного руководства.
.TP
.B batch("myfile");
Выполняет содержимое файла
.IR myfile ,
который должен содержать команды Maxima.
.TP
.B closefile("myfile");
Закрывает файловый сеанс, открытый командой writefile (см. ниже).
.TP
.B demo("myfile");
Выполняет содержимое файла
.IR myfile ,
который должен содержать команды Maxima,
по одной.
.TP
.B ev(infolists);
Выводит содержимое всех доступных информационных списков.
.TP
.B functions;
Выводит список имен определенных к данному моменту функций.
.TP
.B infolists;
Выводит список различных доступных информационных списков.
.TP
.B kill(objectlist);
Удаляет объект(ы), записанные внутри круглых скобок.
.I kill(all)
удаляет все объекты, созданные пользователем, восстанавливая начальное состояние
Maxima.
.TP
.B quit();
Выход из
.IR Maxima .
.TP
.B reset();
Сбрасывает все управляющие параметры Maxima в значения по умолчанию.
.TP
.B values;
Выводит список имен переменных, содержащих скалярные значения.
.TP
.B writefile("myfile");
Начинает запись сеанса в файл
.IR myfile ;
одновременно может быть открыт только один файл, а команда
.I closefile
должна быть вызвана до выхода из Maxima для сброса буфера.
.SH ГРАФИЧЕСКИЕ КОМАНДЫ
Maxima способна строить двухмерные и трехмерные графики. Ниже приведены
простой двумерный
.LP
.B plot2d (sin(x), [x, -2*%pi, 2*%pi]);
.LP
и трехмерный примеры
.LP
.B plot3d (2^(-u^2+v^2), [u, -5, 5], [v, -7, 7]);
.LP
По умолчанию построение графиков осуществляется программой
.I 
gnuplot .
Есть и другие способы построения графиков; см. "? plot_options".
Для более подробной информации о построении графиков, см. "? plot".
.SH ФАЙЛЫ
.TP 1.0i
.I \*(Pr/lib/maxima/\*(Vr/binary-\fIlisp\fR
Скомпилированные файлы для реализации Lisp \fIlisp\fR
.TP 1.0i
.I \*(Pr/info
первичный каталог документации, содержащий info-файлы, используемые 
командой `describe', с возможностью просмотра в emacs и других программах 
для просмотра info-файлов.
.TP 1.0i
.I \*(Pr/share/maxima/\*(Vr/doc/html
HTML-версия документации.
.TP 1.0i
.I \*(Pr/share/maxima/\*(Vr/demo
Демонстрационные файлы Maxima.
.TP 1.0i
.I \*(Pr/share/maxima/\*(Vr/emacs
Файлы Elisp для использования с Emacs или XEmacs.
.TP 1.0i
.I \*(Pr/share/maxima/\*(Vr/share
Дополнительные внешние пакеты.
.TP 1.0i
.I \*(Pr/share/maxima/\*(Vr/doc/share
Документация для дополнительных внешних пакетов.
.TP 1.0i
.I \*(Pr/share/maxima/\*(Vr/src
Полные исходные тексты Maxima.
.TP 1.0i
.I \*(Pr/share/maxima/\*(Vr/tests
Набор тестов.
.TP 1.0i
.I \*(Pr/share/maxima/\*(Vr/xmaxima
Файлы поддержки Xmaxima.
.TP 1.0i
.I \*(Pr/libexec/maxima/\*(Vr/
Сценарии сопутствующих Maxima утилит.
.SH ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ
.TP
\fBMAXIMA_USERDIR\fR
Указывает на каталог с файлами пользовательских настроек. По умолчанию пути
поиска Maxima включают \fBMAXIMA_USERDIR\fR. Значение по умолчанию:
\fB$HOME/.maxima\fR.
.TP
\fBMAXIMA_PREFIX\fR
Свои входные файлы Maxima ищет в каталоге, указанном во время компиляции,
\*(Pr. Maxima можно переместить в другой каталог до тех пор пока сценарий
.I maxima
поддерживает то же относительное положение по отношениею к входным
файлам Maxima. Если, в силу каких-то причин, сценарий 
.I maxima 
перемещается отдельно, для указания вершины дерева, 
содержащего входные файлы системы, необходимо установить значение
\fBMAXIMA_PREFIX\fR.
.TP
\fBMAXIMA_DIRECTORY\fR
\fBMAXIMA_DIRECTORY\fR экивалентна \fBMAXIMA_PREFIX\fR. Включена только для
обратной совместимости с предыдущими версиями Maxima.
.LP
Maxima использует несколько дополнительных переменных окружения для
взаимодействия между сценарием 
.I maxima 
и образом Lisp-системы. Все эти переменные
начинаются с \fIMAXIMA_\fR и не должны меняться пользователем.
.SH ФАЙЛЫ НАСТРОЕК
.TP
\fBmaximarc\fR
\fBmaximarc\fR  загружается скриптом
.I maxima
при запуске системы. Он должен
быть расположен в каталоге \fB$MAXIMA_USERDIR\fR (см. выше). \fBmaximarc\fR можно использовать, 
\fIнапример\fR, для изменения выбранной по умолчанию
реализации Lisp на CMUCL включением строки "MAXIMA_LISP=cmucl".
.TP
\fBmaxima-init.lisp\fR
При запуске Maxima загрузит Lisp-файл \fBmaxima-init.lisp\fR, если найдет его в
каталогах для поиска. Для пользовательской настройке,
\fBmaxima-init.lisp\fR должен располагаться в \fB$MAXIMA_USERDIR\fR
(см. выше). Поскольку Maxima обычно имеет системный файл
\fBmaxima-init.lisp\fR, пользователь может скопировать содержимое системного \fBmaxima-init.lisp\fR 
в свой личный файл.
.TP
\fBmaxima-init.mac\fR
При запуске Maxima загрузит Maxima-файл \fBmaxima-init.mac\fR, если найдет его в
каталогах для поиска. Для пользовательской настройке,
\fBmaxima-init.mac\fR должен располагаться в \fB$MAXIMA_USERDIR\fR
(см. выше). 
.SH ССЫЛКИ
Старая ссылка:  
.I "MACSYMA. Справочное руководство"
(тома 1 и 2).
Группа Mathlab,
Лаборатория компьютерных наук, МТИ.
Версия 10.
Январь 1983 г.
.LP
Новые ссылки: 
.I http://maxima.sourceforge.net
.SH ОШИБКИ
.I Maxima
- сложная система, содержащая как известные, так и неизвестные ошибки.
Используйте ее на свой страх и риск. База ошибок Maxima доступна по адресу
.LP
https://sourceforge.net/p/maxima/bugs/
.LP
Новые сообщения об ошибках всегда приветствуются. Пожалуйста,
включайте в сообщение вывод функции Maxima "build_info()".
.SH АВТОРЫ

MACSYMA (Проект MAC's SYmbolic MAnipulation System) была разработана
группой Mathlab в лаборатории компьютерных наук МТИ (первоначально 
известной как Проект MAC) в 1969-1972 гг. Эта работа была поддержана
грантами NSG 1323 NASA, N00014-77-C-0641 Исследовательского агентства ВМС,
ET-78-C-02-4687 Министерства энергетики США и F49620-79-C-020 ВВС США.
Затем MACSYMA была модифицирована для использования под операционной 
системой UNIX (на компьютерах DEC VAX и рабочих станциях Sun) Ричардом 
Фейтманом и его коллегами из Калифорнийского университета в Беркли; эта 
версия MACSYMA известная как VAXIMA.
Настоящая версия развивается из переработки общедоступной MIT MACSYMA для \*(Ky,
выполненной Уильямом Шелтером (Техасский университет в Остине), который
развивал ее до своей кончины в 2001 г. Она содержит многочисленные дополнения,
расширения и улучшения относительно оригинала. Оригинальная версия этой
справочной страницы была написана Р.П.К. Роджерсом (rodgers@maxwell.mmwb.ucsf.edu) 
из Фармацевтической школы Калифорнийского университета (Сан-Франциско, CA 94143) 
в 1989 г., и существенно переработана Джеймсом Амундсоном в 2002 г.

Сейчас Maxima развивается и поддерживается проектом Maxima <http://maxima.sourceforge.net>.
.\"

